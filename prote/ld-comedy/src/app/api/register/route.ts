import prisma from "@/lib/prisma"
import bcrypt from "bcryptjs"
import { NextResponse } from "next/server"

export async function POST(request: Request) {
  try {
    console.log("üìù D√©but de l'inscription - Prisma initialis√©:", !!prisma)

    // R√©cup√©rer les donn√©es du formulaire (avec firstName et lastName)
    const { email, password, firstName, lastName } = await request.json()
    console.log("üìß Email re√ßu:", email)

    // Validation des donn√©es
    if (!email || !password || !firstName || !lastName) {
      return NextResponse.json(
        { error: "‚ùå Tous les champs sont requis (pr√©nom, nom, email, mot de passe)" },
        { status: 400 }
      )
    }

    // Validation de l'email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: "‚ùå Format d'email invalide" },
        { status: 400 }
      )
    }

    // Validation du mot de passe
    if (password.length < 8) {
      return NextResponse.json(
        { error: "‚ùå Le mot de passe doit contenir au moins 8 caract√®res" },
        { status: 400 }
      )
    }

    // V√©rifier si l'utilisateur existe d√©j√†
    console.log("üîç V√©rification de l'utilisateur existant...")
    const existingUser = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    })
    console.log("‚úÖ V√©rification termin√©e, utilisateur trouv√©:", !!existingUser)

    if (existingUser) {
      return NextResponse.json(
        { error: "‚ùå Un compte existe d√©j√† avec cet email" },
        { status: 400 }
      )
    }

    // Hacher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 12)

    // Combiner pr√©nom et nom
    const fullName = `${firstName.trim()} ${lastName.trim()}`

    // Cr√©er l'utilisateur (seulement avec les champs qui existent dans le sch√©ma)
    console.log("üíæ Cr√©ation de l'utilisateur dans la base de donn√©es...")
    const user = await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        name: fullName,
        password: hashedPassword,
        role: "PENDING",  // En attente de choix du r√¥le (artiste ou th√©√¢tre)
        isVerified: false // Pas encore v√©rifi√©
      }
    })
    console.log("‚úÖ Utilisateur cr√©√© avec succ√®s, ID:", user.id)

    // Retourner les donn√©es sans le mot de passe
    const { password: _, ...userWithoutPassword } = user

    console.log("‚úÖ Utilisateur cr√©√© avec succ√®s:", userWithoutPassword)

    return NextResponse.json(
      { 
        message: "‚úÖ Inscription r√©ussie ! Vous pouvez maintenant vous connecter.",
        user: userWithoutPassword 
      },
      { status: 201 }
    )

  } catch (error) {
    console.error("‚ùå Erreur d√©taill√©e lors de l'inscription:", error)
    console.error("‚ùå Type d'erreur:", typeof error)
    console.error("‚ùå Stack trace:", error instanceof Error ? error.stack : 'No stack')

    // Gestion d'erreurs plus sp√©cifique
    if (error instanceof Error) {
      console.error("‚ùå Message d'erreur:", error.message)

      if (error.message.includes('Unique constraint')) {
        return NextResponse.json(
          { error: "‚ùå Un compte existe d√©j√† avec cet email" },
          { status: 400 }
        )
      }

      // Retourner le message d'erreur d√©taill√© en d√©veloppement
      return NextResponse.json(
        {
          error: "‚ùå Erreur serveur lors de l'inscription. Veuillez r√©essayer.",
          details: process.env.NODE_ENV === 'development' ? error.message : undefined
        },
        { status: 500 }
      )
    }

    return NextResponse.json(
      { error: "‚ùå Erreur serveur lors de l'inscription. Veuillez r√©essayer." },
      { status: 500 }
    )
  }
}